#!/usr/bin/env zsh
# shellcheck shell=bash

# COLORS

alias grep='grep --color=auto'
alias ls="command ls -G"

# Use git diff instead of diff
alias diff="command git diff"

# GIT

git() {
  command=$1
  shift 1

  # Remove merged & squash-merged branches
  if [[ "${command}" == "branch" ]] && [[ "${1}" == "prune" ]]; then
    command "git" branch --merged | grep -E -v "(^\*|main|default|master|develop)" | xargs command "git" branch -D
    command "git" fetch -a && command "git" branch -v | grep '\[gone\]' | cut -f3 -d' ' | xargs command "git" branch -D
    return $?
  fi
  
  # Stash with untracked changes by default
  if [[ "${command}" == "stash" ]] && [[ "$@" == "" ]]; then
    command "git" stash --include-untracked
    return $?
  fi

  command "git" "${command}" "$@"
}

gitp() {
  command=$1
  shift 1
  if [[ "${command}" == "ush" ]]; then
    git push "$@"
  fi
  if [[ "${command}" == "ull" ]]; then
    git pull "$@"
  fi
}

alias gti="git"

# KILLPORT

killport() {
  port=$1
  if [ -z "${port}" ]; then
    echo "usage: killport port_number"
    return
  fi
  kill -9 $(lsof -i ":${port}" 2>/dev/null | tail -n +2 | tr -s ' ' | cut -f2 -d' ')
}

# NPM

# Use npm@6 when `package-lock.json` uses `"lockfileVersion": 1`,
# Otherwise, use npm@7
npshim() {
  if [ ! -f "package-lock.json" ] || grep -q '"lockfileVersion": 2' "package-lock.json"; then
    npx -p npm@7 -- npm "$@" </dev/null 2>/dev/null
  else
    npx -p npm@6 -- npm "$@" </dev/null 2>/dev/null
  fi
}
npm() {
  # Upgrade all packages to the latest available versions,
  # and update version numbers in 'package.json' and 'package-lock.json'.
  if [[ "$1" == "upgrade" ]]; then
    command "npm" outdated --depth=0 | grep -v "Package" | awk '{print $1"@"$4}' | xargs command "npm" i
    return $?
  fi
  npshim "$@"
}

# RANDOM

random() {
  if [[ "$1" == "mac" ]]; then
    # https://superuser.com/a/218650/257969
    printf '02:%02X:%02X:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]
  fi
  if [[ "$1" == "pin" ]]; then
    printf '%03d-%02d-%03d\n' $[RANDOM%1000] $[RANDOM%100] $[RANDOM%1000]
  fi
  if [[ "$1" == "uuid" ]]; then
    printf '%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] \
    $[RANDOM%256] $[RANDOM%256] \
    $[RANDOM%256] $[RANDOM%256] \
    $[RANDOM%256] $[RANDOM%256] \
    $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256] $[RANDOM%256]
  fi
}